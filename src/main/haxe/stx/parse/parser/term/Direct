package stx.parse.parser.term;

abstract class Direct<I,O> extends Base<I,O,Noise>{
  public function new(?tag:Option<String>,?pos:Pos){
    super(tag,pos);
  }
  public function apply(input:ParseInput<I>):ParseResult<I,O>{
    var future = this.toFletcher().forward(input).direct();
    return if(future == null){
      ParseError.make(input,'trying to run an asynchronous function synchronously',false);
    }else{
      __.option(future.fudge()).fold(
        (v:ArwOut<ParseResult<I,O>,Noise>) -> v.fold(
          ok  -> ok,
          (_) -> input.fail('unknown error')
        ),
        ()  -> input.fail('Future has not resolved for syncrhonous use') 
      );
    }
  }
} 
class DirectLift{
  // static public function apply<I,O>(ipt:ParseInput<I>):ParseResult<I,O>{

  // }
}