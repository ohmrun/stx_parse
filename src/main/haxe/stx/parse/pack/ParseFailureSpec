package stx.parse.pack;

enum ParseFailureSpecSum<E>{
  ParseFailed(e:E,fatal:Bool);
}
@:forward abstract ParseFailureSpec<E>(ParseFailureSpecSum<E>) from ParseFailureSpecSum<E> to ParseFailureSpecSum<E>{
  public function new(self) this = self;
  static public function lift<E>(self:ParseFailureSpecSum<E>):ParseFailureSpec<E> return new ParseFailureSpec(self);
  
  static public function make<E>(error:E,?fatal = false):ParseFailureSpec<E>{
    return ParseFailed(error,fatal);
  }
  static public function with_message(rest:Input<Dynamic>,message:String,?fatal=false){
    return ParseFailed(
      E_WithMessage(FailureMsg.at_with(rest,message)),
      fatal
    );
  }
  public var fatal(get,never):Bool;
  private function get_fatal(){
    return switch(this){
      case ParseFailed(_,fatal) : fatal;
    }
  }

  public function prj():ParseFailureSpecSum<E> return this;
  private var self(get,never):ParseFailureSpec<E>;
  private function get_self():ParseFailureSpec<E> return lift(this);
}